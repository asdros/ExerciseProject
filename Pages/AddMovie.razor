@page "/addMovie"
@inject IMovieService movieService
@inject IDirectorService directorService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<title>Add Movie</title>
<h3>Add Movie</h3>

<div class="row">
    <div class="col-md-4">
        <EditForm Model="@movie" OnValidSubmit="CreateMovie" OnInvalidSubmit="InvalidFormSubmitted">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group">
                <label for="Title">Title</label>
                <InputText form="Title" class="form-control" maxlength="200"
                           @bind-Value="@movie.Title" />
                <ValidationMessage For="@(() => movie.Title)" />
                <br />
                <label for="YearOfProduction">Year of production</label>
                <InputNumber form="YearOfProduction" class="form-control" placeholder="2000"
                             min="1900" max="2100" onKeyDown="if(this.value.length==4) return false;"
                             @bind-Value="@movie.YearOfProduction" />
                <ValidationMessage For="@(() => movie.YearOfProduction)" />
                <br />
                <div class="row">
                    <div class="col">
                        <label for="OriginalSoundtrack">Original soundtrack</label>
                        <br />
                        <InputSelect class="custom-select" form="OriginalSoundtrack" @bind-Value="movie.OriginalSoundtrack">
                            <option selected="selected">Select a language</option>
                            @foreach (var language in Enum.GetValues(typeof(Soundtrack)))
                            {
                                <option value="@language">@language</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => movie.OriginalSoundtrack)" />
                    </div>
                    <div class="col">
                        <label for="Genre">Genre</label>
                        <br />
                        <InputSelect class="custom-select" form="Genre" @bind-Value="movie.Genre">
                            <option selected="selected">Select a genre</option>
                            @foreach (var gender in Enum.GetValues(typeof(Genre)))
                            {
                                <option value="@gender">@gender</option>
                            }
                        </InputSelect>
                        <ValidationMessage For="@(() => movie.Genre)" />
                    </div>
                </div>
                <br />
                <label for="DirectorID">Director</label>
                <br />
                <InputSelect class="custom-select" form="DirectorID" @bind-Value="movie.DirectorID">
                    @foreach (var director in directors)
                    {
                        <option value="@director.ID">@director.Firstname  @director.Surname</option>
                    }
                </InputSelect>
                <ValidationMessage For="@(() => movie.DirectorID)" />
                <br />
                <br />
                <label for="Description">Description</label>
                <InputTextArea form="Description" class="form-control" maxlength="2000"
                               @bind-Value="@movie.Description"></InputTextArea>
                <ValidationMessage For="@(() => movie.Description)" />
                <br />
                <label for="OtherTitles">Other titles</label>
                <InputText form="OtherTitles" class="form-control" maxlength="100"
                           @bind-Value="@movie.OtherTitles" />
                <ValidationMessage For="@(() => movie.OtherTitles)" />
                <br />
                <label for="Image">Image</label>
                <InputFile OnChange="LoadFile" bind-value="@movie.FileData" />
            </div>
            <hr />
            <div class="form-group">
                <input type="submit" class="btn btn-primary" value="Save" />
                <button type="button" class="btn btn-warning" @onclick="() => Cancel()">Cancel</button>
            </div>
        </EditForm>
    </div>
    <div class="col-md-5">
        <img src="@imageToDisplay" />
    </div>
    <br />
    <br />
</div>

@code {
    MovieView movie = new MovieView();
    List<Director> directors = new List<Director>();
    string imageToDisplay;

    protected async Task LoadFile(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        var format = "image/jpeg";
        var resizedImageFile = await imageFile.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);
        var imageDataFileRaw = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        imageToDisplay = imageDataFileRaw;

        ImageAssignment(imageDataFileRaw, resizedImageFile.Name);
    }

    protected void ImageAssignment(string imageBase64, string filename)
    {
        movie.FileData = imageBase64;
        movie.Filename = filename;
    }

    protected override async Task OnInitializedAsync()
    {
        directors = await directorService.FetchAll();
    }

    protected async Task CreateMovie()
    {
        await movieService.Create(movie);
        navigationManager.NavigateTo("/movies");
    }

    protected void Cancel()
    {
        navigationManager.NavigateTo("/movies");
    }

    protected void InvalidFormSubmitted()
    {
        navigationManager.NavigateTo("/addMovie");
    }
}
