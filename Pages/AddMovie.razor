@page "/addMovie"
@inject IMovieService movieService
@inject IDirectorService directorService
@inject Microsoft.AspNetCore.Components.NavigationManager navigationManager

<title>Add Movie</title>
<h3>Add Movie</h3>
<div class="row">
    <div class="col-md-4">
        <form>
            <div class="form-group">
                    <label for="Title">Title</label>
                    <input form="Title" class="form-control"
                           @bind-value="@movie.Title" />
                    <br />
                    <label for="YearOfProduction">Year of production</label>
                    <input form="YearOfProduction" class="form-control" placeholder="2000"
                           @bind-value="@movie.YearOfProduction" />
                    <br />
                <div class="row">
                    <div class="col">
                    <label for="OriginalSoundtrack">Original soundtrack</label>
                    <br />
                    <select class="custom-select" form="OriginalSoundtrack" @bind="movie.OriginalSoundtrack">
                        <option selected="selected">Select a language</option>
                        @foreach (var language in Enum.GetValues(typeof(Soundtrack)))
                        {
                            <option value="@language">@language</option>
                        }
                    </select>
                        </div>
                    <div class="col">
                    <label for="Genre">Genre</label>
                    <br />
                    <select class="custom-select" form="Genre" @bind="movie.Genre">
                        <option selected="selected">Select a genre</option>
                        @foreach (var gender in Enum.GetValues(typeof(Genre)))
                        {
                            <option value="@gender">@gender</option>
                        }
                    </select>
                        </div>
                    </div>
                    <br />
                    <label for="DirectorID">Director</label>
                    <br />
                    <select class="custom-select" form="DirectorID" @bind="movie.DirectorID">
                        @foreach (var director in directors)
                        { 
                            <option value="@director.ID">@director.Firstname  @director.Surname</option>
                        }
                    </select>
                    <br />
                    <br />
                    <label for="Description">Description</label>
                    <textarea form="Description" class="form-control"
                              @bind="@movie.Description"></textarea>
                    <br />
                    <label for="OtherTitles">Other titles</label>
                    <input form="OtherTitles" class="form-control"
                           @bind-value="@movie.OtherTitles" />
                    <br />
                    <label for="Image">Image</label>
                    <InputFile OnChange="LoadFile" bind-value="@movie.FileData" />
                </div>
                <hr />
                <div class="form-group">
                    <button type="button" class="btn btn-primary" @onclick="() => CreateMovie()">Save</button>
                    <button type="button" class="btn btn-warning" @onclick="() => Cancel()">Cancel</button>
                </div>
        </form>
    </div>
    <div class="col-md-5">
        <img src="@imageDataFile" />
    </div>
    <br />
    <br />
</div>

@code {
    MovieView movie = new MovieView();
    List<Director> directors = new List<Director>();
    string imageDataFile;

    protected async Task LoadFile(InputFileChangeEventArgs e)
    {
        var imageFile = e.File;
        var format = "image/jpeg";
        var resizedImageFile = await imageFile.RequestImageFileAsync(format, 300, 300);
        var buffer = new byte[resizedImageFile.Size];
        await resizedImageFile.OpenReadStream().ReadAsync(buffer);
        var imageDataFileRaw = $"data:{format};base64,{Convert.ToBase64String(buffer)}";
        imageDataFile = imageDataFileRaw;

        movie.FileData = imageDataFileRaw;
        movie.Filename = resizedImageFile.Name;
    }

    protected override async Task OnInitializedAsync()
    {
        directors = await directorService.FetchAll();
    }

    protected async Task CreateMovie()
    {
        await movieService.Create(movie);
        navigationManager.NavigateTo("/movies");
    }

    protected void Cancel()
    {
        navigationManager.NavigateTo("/movies");
    }
}
